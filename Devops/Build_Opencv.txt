


git clone opencv && opencv_contrib



1. nvidia-driver manually install && apt nvidia driver install
2. cuda toolkit, cudnn download from nvidia site(compat version download)
2-1. cudnn library tar.gz download
2-2. tar xf cudnn.deb
3. cp -rf include/ lib64/ /usr/local/cuda-11.4/include /usr/loca/cuda-11.4/lib64
4.



cmake \ -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D OPENCV_GENERATE_PKGCONFIG=ON \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_EXTRA_MODULES_PATH=/home/argos/opencv_contrib/modules \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D BUILD_EXAMPLES=ON \
-D BUILD_DOCS=OFF \
-D BUILD_SHARED_LIBS=ON \
-D BUILD_opencv_python2=OFF \
-D BUILD_opencv_python3=ON \
-D BUILD_NEW_PYTHON_SUPPORT=ON \
-D WITH_CUDA=ON \
-D WITH_CUBLAS=ON \
-D WITH_CUDNN=ON \
-D CUDA_FAST_MATH=1 \
-D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.4 \
-D OPENCV_DNN_CUDA=ON \
-D CUDA_ARCH_BIN=7.5 \
-D CUDA_ARCH_PTX=7.5 \
-D CUDNN_VERSION=8.2 \
-D CUDNN_INCLUDE_DIR=/usr/local/cuda-11.4/include \
-D CUDNN_LIBRARY=/usr/local/cuda-11.4/lib64/libcudnn.so.8.2.4 \
-D WITH_VTK=ON \
-D WITH_OPENCL=ON ..




cmake verison upgrade?

5.$ vim .bashrc



-- 추가 --

export CUDA_HOME=/usr/local/cuda

export LD_LIBRARY_PATH=${CUDA_HOME}/lib64 

 

PATH=${CUDA_HOME}/bin:${PATH} 

export PATH 

저장후 종료

git clone https://github.com/ros-perception/vision_opencv.git

opencv version change (when new version opencv build)
/opt/ros/melodic/lib/pkgconfig/.pc(link opencv package)
/usr/lib/aarch64-linux-gnu/pkgconfig/opencv4.pc 
/usr/lib/aarch64-linux-gnu/cmake/opencv4/
/opt/ros/melodic/share/cv_bridge/cmake

sudo cp libcv_bridge.so  libimage_geometry.so /opt/ros/melodic/lib

sudo apt-get install ros-(ROS version name)-cv-bridge

sudo apt-get install ros-(ROS version name)-vision-opencv

reference site :

https://lapina.tistory.com/133
https://lapina.tistory.com/132
https://developer.nvidia.com/cuda-gpus
https://vi.stackexchange.com/questions/10385/find-and-replace-all-numbers-with-0 // vim replace number

************
https://github.com/ros-perception/vision_opencv/issues/272 // cv_bridge => opencv4 version comflict error solution
https://cyaninfinite.com/ros-cv-bridge-with-python-3/ // Compiling ROS cv_bridge with Python 3
==> sudo apt-get install python3-pip python-catkin-tools python3-dev python3-numpy => sudo apt-get install python3-pip python3-catkin-tools python3-dev python3-numpy


https://blog.actorsfit.com/a?ID=00001-56638624-b245-400c-9039-38079a716289 => opencv4 version comflict error solution?
(try another)
https://github.com/ros-perception/vision_opencv/issues/205 => opencv4 version comflict error solution? (try another)
https://github.com/ros-perception/vision_opencv/issues/329 => opencv4 version comflict error solution? (try another)
https://blog.csdn.net/qq_18276949/article/details/107014026 => opencv4 version comflict error solution? (try another)

https://askubuntu.com/questions/26498/how-to-choose-the-default-gcc-and-g-version //alternative gcc

https://forums.developer.nvidia.com/t/how-to-install-old-jetpack-version/169994 // jetpack old version sdkmanager

======================================================================================================================
pre_install_linux_package_list :

sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer ant

sudo apt-get install etc..
sudo apt-get install cmake build-essential pkg-config ant
sudo apt-get install libtiff5-dev libopenexr-dev libwebp-dev libpng-dev
sudo apt-get install libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev libavresample-dev libv4l-dev
sudo apt-get install libgtk-3-dev
sudo apt-get install libtesseract-dev
sudo apt-get install libhdf5-dev
sudo apt-get install libopenblas-dev libopenblas-base liblapacke-dev
sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
sudo apt-get install libtbb-dev



=====================================================================================================================

cmake \ -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D OPENCV_GENERATE_PKGCONFIG=ON \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_EXTRA_MODULES_PATH=/home/argos/opencv_contrib/modules \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D BUILD_EXAMPLES=ON \
-D BUILD_DOCS=OFF \
-D BUILD_SHARED_LIBS=ON \
-D BUILD_opencv_python2=OFF \
-D BUILD_opencv_python3=ON \
-D BUILD_NEW_PYTHON_SUPPORT=ON \
-D WITH_CUDA=ON \
-D WITH_CUBLAS=ON \
-D WITH_CUDNN=ON \
-D CUDA_FAST_MATH=1 \
-D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2 \
-D OPENCV_DNN_CUDA=ON \
-D CUDA_ARCH_BIN=7.5 \
-D CUDA_ARCH_PTX=7.5 \
-D CUDNN_VERSION=8.2 \
-D CUDNN_INCLUDE_DIR=/usr/local/cuda-10.2/include \
-D CUDNN_LIBRARY=/usr/local/cuda-10.2/lib64/libcudnn.so.8.3.3 \
-D WITH_VTK=ON \
-D WITH_OPENCL=ON ..



cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=/home/argos/opencv_contrib/modules -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D BUILD_DOCS=OFF -D BUILD_SHARED_LIBS=ON -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_CUDA=ON -D WITH_CUBLAS=ON -D WITH_CUDNN=ON -D CUDA_FAST_MATH=1 -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2 -D OPENCV_DNN_CUDA=ON -D CUDA_ARCH_BIN=7.5 -D CUDA_ARCH_PTX=7.5 -D CUDNN_VERSION=8.2 -D CUDNN_INCLUDE_DIR=/usr/local/cuda-10.2/include -D CUDNN_LIBRARY=/usr/local/cuda-10.2/lib64/libcudnn.so.8.3.3 -D WITH_VTK=ON -D WITH_OPENCL=ON ..


==> 4.5.5 => too many error
==> 4.5.4 => sudo make -j4 => -j8 error


cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=/home/argos/opencv_contrib/modules -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D BUILD_DOCS=OFF -D BUILD_SHARED_LIBS=ON -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_CUDA=ON -D WITH_CUBLAS=ON -D WITH_CUDNN=ON -D CUDA_FAST_MATH=1 -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2 -D OPENCV_DNN_CUDA=ON -D CUDA_ARCH_BIN=7.5 -D CUDA_ARCH_PTX=7.5 -D CUDNN_VERSION=8.3.3 -D CUDNN_INCLUDE_DIR=/usr/local/cuda-10.2/include -D CUDNN_LIBRARY=/usr/local/cuda-10.2/lib64/libcudnn.so.8.3.3 -D WITH_VTK=ON -D WITH_OPENCL=ON -D BUILD_JAVA=ON -D WITH_OPENGL=ON -D WITH_VA=ON  ..


sudo cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D OPENCV_GENERATE_PKGCONFIG=ON -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=/home/argos/opencv_contrib/modules -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D BUILD_DOCS=OFF -D BUILD_SHARED_LIBS=ON -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_CUDA=ON -D WITH_CUBLAS=ON -D WITH_CUDNN=ON -D CUDA_FAST_MATH=1 -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2 -D OPENCV_DNN_CUDA=ON -D CUDA_ARCH_BIN=7.5 -D CUDA_ARCH_PTX=7.5 -D CUDNN_VERSION=8.3 -D CUDNN_INCLUDE_DIR=/usr/local/cuda-10.2/include -D CUDNN_LIBRARY=/usr/local/cuda-10.2/lib64/libcudnn.so.8.3.3 -D WITH_VTK=ON -D WITH_OPENCL=ON -D BUILD_JAVA=ON -D WITH_OPENGL=ON -D WITH_VA=ON -D WITH_GTK=ON ..

install location : /usr/local/include/opencv4/opencv2
